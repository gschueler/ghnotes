apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'application'

group = "${group}"
version = "${version}"
description = "Generate release notes from github milestones and commits"
mainClassName="us.vario.greg.ghnotes.Notes"

repositories {
    jcenter()
}

sourceSets {
    main.groovy.srcDir 'src'
    test.groovy.srcDir 'test'
}

dependencies {
    compile 'org.codehaus.groovy:groovy-all:2.2.1'
    compile 'com.sun.jersey:jersey-client:1.17'
    compile 'com.sun.jersey:jersey-core:1.17'
    compile 'org.codehaus.jackson:jackson-core-asl:1.9.1'
    compile 'org.codehaus.jackson:jackson-mapper-asl:1.9.1'
    compile 'com.beust:jcommander:1.30'
    testCompile 'junit:junit:4.10'
    testCompile "org.spockframework:spock-core:0.7-groovy-2.0"
    testCompile "cglib:cglib-nodep:2.2"
    testCompile "org.objenesis:objenesis:2.1"
}

jar{
    manifest{
        attributes 'Main-Class':'us.vario.greg.ghnotes.Notes'
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.10'
}

// code below this can be safely removed if you don't want publish library ever

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:0.3'
        classpath 'com.github.jengelman.gradle.plugins:shadow:0.8'
    }
}

apply plugin: 'maven-publish'
apply plugin: 'bintray'
apply plugin: 'shadow'

publishing {
    publications {
        groovyMaven(MavenPublication) {
            from components.java
        }
    }
}

// set bintrayUser & bintrayKey in gradle.properties
bintray {

    user = getPropertyOrUseDefault("bintrayUser", "fake_user")
    key = getPropertyOrUseDefault("bintrayKey", "fake_key")
    publications = ['groovyMaven']

    def projectName = project.name
    def projectDescription = project.description

    pkg {
        repo = 'maven' // or your repo name
        name = projectName      // somehow project.* doesn't work in this closure
        desc = projectDescription
        licenses = ['Apache-2.0']
    }
    dryRun = true // whether to run this as dry-run, without deploying
}

String getPropertyOrUseDefault(String propertyName, String defaultValue) {
    hasProperty(propertyName) ? getProperty(propertyName) : defaultValue
}

shadow {
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
}
